/**
 * Copyright (c) 2000-2012 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.meera.multidatasource.service.base;

import com.liferay.counter.service.CounterLocalService;

import com.liferay.portal.kernel.bean.BeanReference;
import com.liferay.portal.kernel.bean.IdentifiableBean;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdate;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdateFactoryUtil;
import com.liferay.portal.kernel.dao.orm.DynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQueryFactoryUtil;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.search.Indexable;
import com.liferay.portal.kernel.search.IndexableType;
import com.liferay.portal.kernel.util.OrderByComparator;
import com.liferay.portal.model.PersistedModel;
import com.liferay.portal.service.BaseLocalServiceImpl;
import com.liferay.portal.service.PersistedModelLocalServiceRegistryUtil;
import com.liferay.portal.service.ResourceLocalService;
import com.liferay.portal.service.ResourceService;
import com.liferay.portal.service.UserLocalService;
import com.liferay.portal.service.UserService;
import com.liferay.portal.service.persistence.ResourcePersistence;
import com.liferay.portal.service.persistence.UserPersistence;

import com.meera.multidatasource.model.TableFromDefaultDataSource;
import com.meera.multidatasource.service.TableFromAnotherDataSourceLocalService;
import com.meera.multidatasource.service.TableFromAnotherDataSourceService;
import com.meera.multidatasource.service.TableFromDefaultDataSourceLocalService;
import com.meera.multidatasource.service.TableFromDefaultDataSourceService;
import com.meera.multidatasource.service.persistence.TableFromAnotherDataSourcePersistence;
import com.meera.multidatasource.service.persistence.TableFromDefaultDataSourcePersistence;

import java.io.Serializable;

import java.util.List;

import javax.sql.DataSource;

/**
 * The base implementation of the table from default data source local service.
 *
 * <p>
 * This implementation exists only as a container for the default service methods generated by ServiceBuilder. All custom service methods should be put in {@link com.meera.multidatasource.service.impl.TableFromDefaultDataSourceLocalServiceImpl}.
 * </p>
 *
 * @author E5410
 * @see com.meera.multidatasource.service.impl.TableFromDefaultDataSourceLocalServiceImpl
 * @see com.meera.multidatasource.service.TableFromDefaultDataSourceLocalServiceUtil
 * @generated
 */
public abstract class TableFromDefaultDataSourceLocalServiceBaseImpl
	extends BaseLocalServiceImpl
	implements TableFromDefaultDataSourceLocalService, IdentifiableBean {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. Always use {@link com.meera.multidatasource.service.TableFromDefaultDataSourceLocalServiceUtil} to access the table from default data source local service.
	 */

	/**
	 * Adds the table from default data source to the database. Also notifies the appropriate model listeners.
	 *
	 * @param tableFromDefaultDataSource the table from default data source
	 * @return the table from default data source that was added
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.REINDEX)
	public TableFromDefaultDataSource addTableFromDefaultDataSource(
		TableFromDefaultDataSource tableFromDefaultDataSource)
		throws SystemException {
		tableFromDefaultDataSource.setNew(true);

		return tableFromDefaultDataSourcePersistence.update(tableFromDefaultDataSource,
			false);
	}

	/**
	 * Creates a new table from default data source with the primary key. Does not add the table from default data source to the database.
	 *
	 * @param IFDDSId the primary key for the new table from default data source
	 * @return the new table from default data source
	 */
	public TableFromDefaultDataSource createTableFromDefaultDataSource(
		long IFDDSId) {
		return tableFromDefaultDataSourcePersistence.create(IFDDSId);
	}

	/**
	 * Deletes the table from default data source with the primary key from the database. Also notifies the appropriate model listeners.
	 *
	 * @param IFDDSId the primary key of the table from default data source
	 * @return the table from default data source that was removed
	 * @throws PortalException if a table from default data source with the primary key could not be found
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.DELETE)
	public TableFromDefaultDataSource deleteTableFromDefaultDataSource(
		long IFDDSId) throws PortalException, SystemException {
		return tableFromDefaultDataSourcePersistence.remove(IFDDSId);
	}

	/**
	 * Deletes the table from default data source from the database. Also notifies the appropriate model listeners.
	 *
	 * @param tableFromDefaultDataSource the table from default data source
	 * @return the table from default data source that was removed
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.DELETE)
	public TableFromDefaultDataSource deleteTableFromDefaultDataSource(
		TableFromDefaultDataSource tableFromDefaultDataSource)
		throws SystemException {
		return tableFromDefaultDataSourcePersistence.remove(tableFromDefaultDataSource);
	}

	public DynamicQuery dynamicQuery() {
		Class<?> clazz = getClass();

		return DynamicQueryFactoryUtil.forClass(TableFromDefaultDataSource.class,
			clazz.getClassLoader());
	}

	/**
	 * Performs a dynamic query on the database and returns the matching rows.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the matching rows
	 * @throws SystemException if a system exception occurred
	 */
	@SuppressWarnings("rawtypes")
	public List dynamicQuery(DynamicQuery dynamicQuery)
		throws SystemException {
		return tableFromDefaultDataSourcePersistence.findWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Performs a dynamic query on the database and returns a range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @return the range of matching rows
	 * @throws SystemException if a system exception occurred
	 */
	@SuppressWarnings("rawtypes")
	public List dynamicQuery(DynamicQuery dynamicQuery, int start, int end)
		throws SystemException {
		return tableFromDefaultDataSourcePersistence.findWithDynamicQuery(dynamicQuery,
			start, end);
	}

	/**
	 * Performs a dynamic query on the database and returns an ordered range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @param orderByComparator the comparator to order the results by (optionally <code>null</code>)
	 * @return the ordered range of matching rows
	 * @throws SystemException if a system exception occurred
	 */
	@SuppressWarnings("rawtypes")
	public List dynamicQuery(DynamicQuery dynamicQuery, int start, int end,
		OrderByComparator orderByComparator) throws SystemException {
		return tableFromDefaultDataSourcePersistence.findWithDynamicQuery(dynamicQuery,
			start, end, orderByComparator);
	}

	/**
	 * Returns the number of rows that match the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the number of rows that match the dynamic query
	 * @throws SystemException if a system exception occurred
	 */
	public long dynamicQueryCount(DynamicQuery dynamicQuery)
		throws SystemException {
		return tableFromDefaultDataSourcePersistence.countWithDynamicQuery(dynamicQuery);
	}

	public TableFromDefaultDataSource fetchTableFromDefaultDataSource(
		long IFDDSId) throws SystemException {
		return tableFromDefaultDataSourcePersistence.fetchByPrimaryKey(IFDDSId);
	}

	/**
	 * Returns the table from default data source with the primary key.
	 *
	 * @param IFDDSId the primary key of the table from default data source
	 * @return the table from default data source
	 * @throws PortalException if a table from default data source with the primary key could not be found
	 * @throws SystemException if a system exception occurred
	 */
	public TableFromDefaultDataSource getTableFromDefaultDataSource(
		long IFDDSId) throws PortalException, SystemException {
		return tableFromDefaultDataSourcePersistence.findByPrimaryKey(IFDDSId);
	}

	public PersistedModel getPersistedModel(Serializable primaryKeyObj)
		throws PortalException, SystemException {
		return tableFromDefaultDataSourcePersistence.findByPrimaryKey(primaryKeyObj);
	}

	/**
	 * Returns a range of all the table from default data sources.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set.
	 * </p>
	 *
	 * @param start the lower bound of the range of table from default data sources
	 * @param end the upper bound of the range of table from default data sources (not inclusive)
	 * @return the range of table from default data sources
	 * @throws SystemException if a system exception occurred
	 */
	public List<TableFromDefaultDataSource> getTableFromDefaultDataSources(
		int start, int end) throws SystemException {
		return tableFromDefaultDataSourcePersistence.findAll(start, end);
	}

	/**
	 * Returns the number of table from default data sources.
	 *
	 * @return the number of table from default data sources
	 * @throws SystemException if a system exception occurred
	 */
	public int getTableFromDefaultDataSourcesCount() throws SystemException {
		return tableFromDefaultDataSourcePersistence.countAll();
	}

	/**
	 * Updates the table from default data source in the database or adds it if it does not yet exist. Also notifies the appropriate model listeners.
	 *
	 * @param tableFromDefaultDataSource the table from default data source
	 * @return the table from default data source that was updated
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.REINDEX)
	public TableFromDefaultDataSource updateTableFromDefaultDataSource(
		TableFromDefaultDataSource tableFromDefaultDataSource)
		throws SystemException {
		return updateTableFromDefaultDataSource(tableFromDefaultDataSource, true);
	}

	/**
	 * Updates the table from default data source in the database or adds it if it does not yet exist. Also notifies the appropriate model listeners.
	 *
	 * @param tableFromDefaultDataSource the table from default data source
	 * @param merge whether to merge the table from default data source with the current session. See {@link com.liferay.portal.service.persistence.BatchSession#update(com.liferay.portal.kernel.dao.orm.Session, com.liferay.portal.model.BaseModel, boolean)} for an explanation.
	 * @return the table from default data source that was updated
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.REINDEX)
	public TableFromDefaultDataSource updateTableFromDefaultDataSource(
		TableFromDefaultDataSource tableFromDefaultDataSource, boolean merge)
		throws SystemException {
		tableFromDefaultDataSource.setNew(false);

		return tableFromDefaultDataSourcePersistence.update(tableFromDefaultDataSource,
			merge);
	}

	/**
	 * Returns the table from another data source local service.
	 *
	 * @return the table from another data source local service
	 */
	public TableFromAnotherDataSourceLocalService getTableFromAnotherDataSourceLocalService() {
		return tableFromAnotherDataSourceLocalService;
	}

	/**
	 * Sets the table from another data source local service.
	 *
	 * @param tableFromAnotherDataSourceLocalService the table from another data source local service
	 */
	public void setTableFromAnotherDataSourceLocalService(
		TableFromAnotherDataSourceLocalService tableFromAnotherDataSourceLocalService) {
		this.tableFromAnotherDataSourceLocalService = tableFromAnotherDataSourceLocalService;
	}

	/**
	 * Returns the table from another data source remote service.
	 *
	 * @return the table from another data source remote service
	 */
	public TableFromAnotherDataSourceService getTableFromAnotherDataSourceService() {
		return tableFromAnotherDataSourceService;
	}

	/**
	 * Sets the table from another data source remote service.
	 *
	 * @param tableFromAnotherDataSourceService the table from another data source remote service
	 */
	public void setTableFromAnotherDataSourceService(
		TableFromAnotherDataSourceService tableFromAnotherDataSourceService) {
		this.tableFromAnotherDataSourceService = tableFromAnotherDataSourceService;
	}

	/**
	 * Returns the table from another data source persistence.
	 *
	 * @return the table from another data source persistence
	 */
	public TableFromAnotherDataSourcePersistence getTableFromAnotherDataSourcePersistence() {
		return tableFromAnotherDataSourcePersistence;
	}

	/**
	 * Sets the table from another data source persistence.
	 *
	 * @param tableFromAnotherDataSourcePersistence the table from another data source persistence
	 */
	public void setTableFromAnotherDataSourcePersistence(
		TableFromAnotherDataSourcePersistence tableFromAnotherDataSourcePersistence) {
		this.tableFromAnotherDataSourcePersistence = tableFromAnotherDataSourcePersistence;
	}

	/**
	 * Returns the table from default data source local service.
	 *
	 * @return the table from default data source local service
	 */
	public TableFromDefaultDataSourceLocalService getTableFromDefaultDataSourceLocalService() {
		return tableFromDefaultDataSourceLocalService;
	}

	/**
	 * Sets the table from default data source local service.
	 *
	 * @param tableFromDefaultDataSourceLocalService the table from default data source local service
	 */
	public void setTableFromDefaultDataSourceLocalService(
		TableFromDefaultDataSourceLocalService tableFromDefaultDataSourceLocalService) {
		this.tableFromDefaultDataSourceLocalService = tableFromDefaultDataSourceLocalService;
	}

	/**
	 * Returns the table from default data source remote service.
	 *
	 * @return the table from default data source remote service
	 */
	public TableFromDefaultDataSourceService getTableFromDefaultDataSourceService() {
		return tableFromDefaultDataSourceService;
	}

	/**
	 * Sets the table from default data source remote service.
	 *
	 * @param tableFromDefaultDataSourceService the table from default data source remote service
	 */
	public void setTableFromDefaultDataSourceService(
		TableFromDefaultDataSourceService tableFromDefaultDataSourceService) {
		this.tableFromDefaultDataSourceService = tableFromDefaultDataSourceService;
	}

	/**
	 * Returns the table from default data source persistence.
	 *
	 * @return the table from default data source persistence
	 */
	public TableFromDefaultDataSourcePersistence getTableFromDefaultDataSourcePersistence() {
		return tableFromDefaultDataSourcePersistence;
	}

	/**
	 * Sets the table from default data source persistence.
	 *
	 * @param tableFromDefaultDataSourcePersistence the table from default data source persistence
	 */
	public void setTableFromDefaultDataSourcePersistence(
		TableFromDefaultDataSourcePersistence tableFromDefaultDataSourcePersistence) {
		this.tableFromDefaultDataSourcePersistence = tableFromDefaultDataSourcePersistence;
	}

	/**
	 * Returns the counter local service.
	 *
	 * @return the counter local service
	 */
	public CounterLocalService getCounterLocalService() {
		return counterLocalService;
	}

	/**
	 * Sets the counter local service.
	 *
	 * @param counterLocalService the counter local service
	 */
	public void setCounterLocalService(CounterLocalService counterLocalService) {
		this.counterLocalService = counterLocalService;
	}

	/**
	 * Returns the resource local service.
	 *
	 * @return the resource local service
	 */
	public ResourceLocalService getResourceLocalService() {
		return resourceLocalService;
	}

	/**
	 * Sets the resource local service.
	 *
	 * @param resourceLocalService the resource local service
	 */
	public void setResourceLocalService(
		ResourceLocalService resourceLocalService) {
		this.resourceLocalService = resourceLocalService;
	}

	/**
	 * Returns the resource remote service.
	 *
	 * @return the resource remote service
	 */
	public ResourceService getResourceService() {
		return resourceService;
	}

	/**
	 * Sets the resource remote service.
	 *
	 * @param resourceService the resource remote service
	 */
	public void setResourceService(ResourceService resourceService) {
		this.resourceService = resourceService;
	}

	/**
	 * Returns the resource persistence.
	 *
	 * @return the resource persistence
	 */
	public ResourcePersistence getResourcePersistence() {
		return resourcePersistence;
	}

	/**
	 * Sets the resource persistence.
	 *
	 * @param resourcePersistence the resource persistence
	 */
	public void setResourcePersistence(ResourcePersistence resourcePersistence) {
		this.resourcePersistence = resourcePersistence;
	}

	/**
	 * Returns the user local service.
	 *
	 * @return the user local service
	 */
	public UserLocalService getUserLocalService() {
		return userLocalService;
	}

	/**
	 * Sets the user local service.
	 *
	 * @param userLocalService the user local service
	 */
	public void setUserLocalService(UserLocalService userLocalService) {
		this.userLocalService = userLocalService;
	}

	/**
	 * Returns the user remote service.
	 *
	 * @return the user remote service
	 */
	public UserService getUserService() {
		return userService;
	}

	/**
	 * Sets the user remote service.
	 *
	 * @param userService the user remote service
	 */
	public void setUserService(UserService userService) {
		this.userService = userService;
	}

	/**
	 * Returns the user persistence.
	 *
	 * @return the user persistence
	 */
	public UserPersistence getUserPersistence() {
		return userPersistence;
	}

	/**
	 * Sets the user persistence.
	 *
	 * @param userPersistence the user persistence
	 */
	public void setUserPersistence(UserPersistence userPersistence) {
		this.userPersistence = userPersistence;
	}

	public void afterPropertiesSet() {
		PersistedModelLocalServiceRegistryUtil.register("com.meera.multidatasource.model.TableFromDefaultDataSource",
			tableFromDefaultDataSourceLocalService);
	}

	public void destroy() {
		PersistedModelLocalServiceRegistryUtil.unregister(
			"com.meera.multidatasource.model.TableFromDefaultDataSource");
	}

	/**
	 * Returns the Spring bean ID for this bean.
	 *
	 * @return the Spring bean ID for this bean
	 */
	public String getBeanIdentifier() {
		return _beanIdentifier;
	}

	/**
	 * Sets the Spring bean ID for this bean.
	 *
	 * @param beanIdentifier the Spring bean ID for this bean
	 */
	public void setBeanIdentifier(String beanIdentifier) {
		_beanIdentifier = beanIdentifier;
	}

	public Object invokeMethod(String name, String[] parameterTypes,
		Object[] arguments) throws Throwable {
		return _clpInvoker.invokeMethod(name, parameterTypes, arguments);
	}

	protected Class<?> getModelClass() {
		return TableFromDefaultDataSource.class;
	}

	protected String getModelClassName() {
		return TableFromDefaultDataSource.class.getName();
	}

	/**
	 * Performs an SQL query.
	 *
	 * @param sql the sql query
	 */
	protected void runSQL(String sql) throws SystemException {
		try {
			DataSource dataSource = tableFromDefaultDataSourcePersistence.getDataSource();

			SqlUpdate sqlUpdate = SqlUpdateFactoryUtil.getSqlUpdate(dataSource,
					sql, new int[0]);

			sqlUpdate.update();
		}
		catch (Exception e) {
			throw new SystemException(e);
		}
	}

	@BeanReference(type = TableFromAnotherDataSourceLocalService.class)
	protected TableFromAnotherDataSourceLocalService tableFromAnotherDataSourceLocalService;
	@BeanReference(type = TableFromAnotherDataSourceService.class)
	protected TableFromAnotherDataSourceService tableFromAnotherDataSourceService;
	@BeanReference(type = TableFromAnotherDataSourcePersistence.class)
	protected TableFromAnotherDataSourcePersistence tableFromAnotherDataSourcePersistence;
	@BeanReference(type = TableFromDefaultDataSourceLocalService.class)
	protected TableFromDefaultDataSourceLocalService tableFromDefaultDataSourceLocalService;
	@BeanReference(type = TableFromDefaultDataSourceService.class)
	protected TableFromDefaultDataSourceService tableFromDefaultDataSourceService;
	@BeanReference(type = TableFromDefaultDataSourcePersistence.class)
	protected TableFromDefaultDataSourcePersistence tableFromDefaultDataSourcePersistence;
	@BeanReference(type = CounterLocalService.class)
	protected CounterLocalService counterLocalService;
	@BeanReference(type = ResourceLocalService.class)
	protected ResourceLocalService resourceLocalService;
	@BeanReference(type = ResourceService.class)
	protected ResourceService resourceService;
	@BeanReference(type = ResourcePersistence.class)
	protected ResourcePersistence resourcePersistence;
	@BeanReference(type = UserLocalService.class)
	protected UserLocalService userLocalService;
	@BeanReference(type = UserService.class)
	protected UserService userService;
	@BeanReference(type = UserPersistence.class)
	protected UserPersistence userPersistence;
	private String _beanIdentifier;
	private TableFromDefaultDataSourceLocalServiceClpInvoker _clpInvoker = new TableFromDefaultDataSourceLocalServiceClpInvoker();
}