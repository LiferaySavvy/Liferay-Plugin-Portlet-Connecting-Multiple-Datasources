/**
 * Copyright (c) 2000-2012 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.meera.multidatasource.service.base;

import com.liferay.counter.service.CounterLocalService;

import com.liferay.portal.kernel.bean.BeanReference;
import com.liferay.portal.kernel.bean.IdentifiableBean;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdate;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdateFactoryUtil;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.service.BaseServiceImpl;
import com.liferay.portal.service.ResourceLocalService;
import com.liferay.portal.service.ResourceService;
import com.liferay.portal.service.UserLocalService;
import com.liferay.portal.service.UserService;
import com.liferay.portal.service.persistence.ResourcePersistence;
import com.liferay.portal.service.persistence.UserPersistence;

import com.meera.multidatasource.model.TableFromDefaultDataSource;
import com.meera.multidatasource.service.TableFromAnotherDataSourceLocalService;
import com.meera.multidatasource.service.TableFromAnotherDataSourceService;
import com.meera.multidatasource.service.TableFromDefaultDataSourceLocalService;
import com.meera.multidatasource.service.TableFromDefaultDataSourceService;
import com.meera.multidatasource.service.persistence.TableFromAnotherDataSourcePersistence;
import com.meera.multidatasource.service.persistence.TableFromDefaultDataSourcePersistence;

import javax.sql.DataSource;

/**
 * The base implementation of the table from default data source remote service.
 *
 * <p>
 * This implementation exists only as a container for the default service methods generated by ServiceBuilder. All custom service methods should be put in {@link com.meera.multidatasource.service.impl.TableFromDefaultDataSourceServiceImpl}.
 * </p>
 *
 * @author E5410
 * @see com.meera.multidatasource.service.impl.TableFromDefaultDataSourceServiceImpl
 * @see com.meera.multidatasource.service.TableFromDefaultDataSourceServiceUtil
 * @generated
 */
public abstract class TableFromDefaultDataSourceServiceBaseImpl
	extends BaseServiceImpl implements TableFromDefaultDataSourceService,
		IdentifiableBean {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. Always use {@link com.meera.multidatasource.service.TableFromDefaultDataSourceServiceUtil} to access the table from default data source remote service.
	 */

	/**
	 * Returns the table from another data source local service.
	 *
	 * @return the table from another data source local service
	 */
	public TableFromAnotherDataSourceLocalService getTableFromAnotherDataSourceLocalService() {
		return tableFromAnotherDataSourceLocalService;
	}

	/**
	 * Sets the table from another data source local service.
	 *
	 * @param tableFromAnotherDataSourceLocalService the table from another data source local service
	 */
	public void setTableFromAnotherDataSourceLocalService(
		TableFromAnotherDataSourceLocalService tableFromAnotherDataSourceLocalService) {
		this.tableFromAnotherDataSourceLocalService = tableFromAnotherDataSourceLocalService;
	}

	/**
	 * Returns the table from another data source remote service.
	 *
	 * @return the table from another data source remote service
	 */
	public TableFromAnotherDataSourceService getTableFromAnotherDataSourceService() {
		return tableFromAnotherDataSourceService;
	}

	/**
	 * Sets the table from another data source remote service.
	 *
	 * @param tableFromAnotherDataSourceService the table from another data source remote service
	 */
	public void setTableFromAnotherDataSourceService(
		TableFromAnotherDataSourceService tableFromAnotherDataSourceService) {
		this.tableFromAnotherDataSourceService = tableFromAnotherDataSourceService;
	}

	/**
	 * Returns the table from another data source persistence.
	 *
	 * @return the table from another data source persistence
	 */
	public TableFromAnotherDataSourcePersistence getTableFromAnotherDataSourcePersistence() {
		return tableFromAnotherDataSourcePersistence;
	}

	/**
	 * Sets the table from another data source persistence.
	 *
	 * @param tableFromAnotherDataSourcePersistence the table from another data source persistence
	 */
	public void setTableFromAnotherDataSourcePersistence(
		TableFromAnotherDataSourcePersistence tableFromAnotherDataSourcePersistence) {
		this.tableFromAnotherDataSourcePersistence = tableFromAnotherDataSourcePersistence;
	}

	/**
	 * Returns the table from default data source local service.
	 *
	 * @return the table from default data source local service
	 */
	public TableFromDefaultDataSourceLocalService getTableFromDefaultDataSourceLocalService() {
		return tableFromDefaultDataSourceLocalService;
	}

	/**
	 * Sets the table from default data source local service.
	 *
	 * @param tableFromDefaultDataSourceLocalService the table from default data source local service
	 */
	public void setTableFromDefaultDataSourceLocalService(
		TableFromDefaultDataSourceLocalService tableFromDefaultDataSourceLocalService) {
		this.tableFromDefaultDataSourceLocalService = tableFromDefaultDataSourceLocalService;
	}

	/**
	 * Returns the table from default data source remote service.
	 *
	 * @return the table from default data source remote service
	 */
	public TableFromDefaultDataSourceService getTableFromDefaultDataSourceService() {
		return tableFromDefaultDataSourceService;
	}

	/**
	 * Sets the table from default data source remote service.
	 *
	 * @param tableFromDefaultDataSourceService the table from default data source remote service
	 */
	public void setTableFromDefaultDataSourceService(
		TableFromDefaultDataSourceService tableFromDefaultDataSourceService) {
		this.tableFromDefaultDataSourceService = tableFromDefaultDataSourceService;
	}

	/**
	 * Returns the table from default data source persistence.
	 *
	 * @return the table from default data source persistence
	 */
	public TableFromDefaultDataSourcePersistence getTableFromDefaultDataSourcePersistence() {
		return tableFromDefaultDataSourcePersistence;
	}

	/**
	 * Sets the table from default data source persistence.
	 *
	 * @param tableFromDefaultDataSourcePersistence the table from default data source persistence
	 */
	public void setTableFromDefaultDataSourcePersistence(
		TableFromDefaultDataSourcePersistence tableFromDefaultDataSourcePersistence) {
		this.tableFromDefaultDataSourcePersistence = tableFromDefaultDataSourcePersistence;
	}

	/**
	 * Returns the counter local service.
	 *
	 * @return the counter local service
	 */
	public CounterLocalService getCounterLocalService() {
		return counterLocalService;
	}

	/**
	 * Sets the counter local service.
	 *
	 * @param counterLocalService the counter local service
	 */
	public void setCounterLocalService(CounterLocalService counterLocalService) {
		this.counterLocalService = counterLocalService;
	}

	/**
	 * Returns the resource local service.
	 *
	 * @return the resource local service
	 */
	public ResourceLocalService getResourceLocalService() {
		return resourceLocalService;
	}

	/**
	 * Sets the resource local service.
	 *
	 * @param resourceLocalService the resource local service
	 */
	public void setResourceLocalService(
		ResourceLocalService resourceLocalService) {
		this.resourceLocalService = resourceLocalService;
	}

	/**
	 * Returns the resource remote service.
	 *
	 * @return the resource remote service
	 */
	public ResourceService getResourceService() {
		return resourceService;
	}

	/**
	 * Sets the resource remote service.
	 *
	 * @param resourceService the resource remote service
	 */
	public void setResourceService(ResourceService resourceService) {
		this.resourceService = resourceService;
	}

	/**
	 * Returns the resource persistence.
	 *
	 * @return the resource persistence
	 */
	public ResourcePersistence getResourcePersistence() {
		return resourcePersistence;
	}

	/**
	 * Sets the resource persistence.
	 *
	 * @param resourcePersistence the resource persistence
	 */
	public void setResourcePersistence(ResourcePersistence resourcePersistence) {
		this.resourcePersistence = resourcePersistence;
	}

	/**
	 * Returns the user local service.
	 *
	 * @return the user local service
	 */
	public UserLocalService getUserLocalService() {
		return userLocalService;
	}

	/**
	 * Sets the user local service.
	 *
	 * @param userLocalService the user local service
	 */
	public void setUserLocalService(UserLocalService userLocalService) {
		this.userLocalService = userLocalService;
	}

	/**
	 * Returns the user remote service.
	 *
	 * @return the user remote service
	 */
	public UserService getUserService() {
		return userService;
	}

	/**
	 * Sets the user remote service.
	 *
	 * @param userService the user remote service
	 */
	public void setUserService(UserService userService) {
		this.userService = userService;
	}

	/**
	 * Returns the user persistence.
	 *
	 * @return the user persistence
	 */
	public UserPersistence getUserPersistence() {
		return userPersistence;
	}

	/**
	 * Sets the user persistence.
	 *
	 * @param userPersistence the user persistence
	 */
	public void setUserPersistence(UserPersistence userPersistence) {
		this.userPersistence = userPersistence;
	}

	public void afterPropertiesSet() {
	}

	public void destroy() {
	}

	/**
	 * Returns the Spring bean ID for this bean.
	 *
	 * @return the Spring bean ID for this bean
	 */
	public String getBeanIdentifier() {
		return _beanIdentifier;
	}

	/**
	 * Sets the Spring bean ID for this bean.
	 *
	 * @param beanIdentifier the Spring bean ID for this bean
	 */
	public void setBeanIdentifier(String beanIdentifier) {
		_beanIdentifier = beanIdentifier;
	}

	public Object invokeMethod(String name, String[] parameterTypes,
		Object[] arguments) throws Throwable {
		return _clpInvoker.invokeMethod(name, parameterTypes, arguments);
	}

	protected Class<?> getModelClass() {
		return TableFromDefaultDataSource.class;
	}

	protected String getModelClassName() {
		return TableFromDefaultDataSource.class.getName();
	}

	/**
	 * Performs an SQL query.
	 *
	 * @param sql the sql query
	 */
	protected void runSQL(String sql) throws SystemException {
		try {
			DataSource dataSource = tableFromDefaultDataSourcePersistence.getDataSource();

			SqlUpdate sqlUpdate = SqlUpdateFactoryUtil.getSqlUpdate(dataSource,
					sql, new int[0]);

			sqlUpdate.update();
		}
		catch (Exception e) {
			throw new SystemException(e);
		}
	}

	@BeanReference(type = TableFromAnotherDataSourceLocalService.class)
	protected TableFromAnotherDataSourceLocalService tableFromAnotherDataSourceLocalService;
	@BeanReference(type = TableFromAnotherDataSourceService.class)
	protected TableFromAnotherDataSourceService tableFromAnotherDataSourceService;
	@BeanReference(type = TableFromAnotherDataSourcePersistence.class)
	protected TableFromAnotherDataSourcePersistence tableFromAnotherDataSourcePersistence;
	@BeanReference(type = TableFromDefaultDataSourceLocalService.class)
	protected TableFromDefaultDataSourceLocalService tableFromDefaultDataSourceLocalService;
	@BeanReference(type = TableFromDefaultDataSourceService.class)
	protected TableFromDefaultDataSourceService tableFromDefaultDataSourceService;
	@BeanReference(type = TableFromDefaultDataSourcePersistence.class)
	protected TableFromDefaultDataSourcePersistence tableFromDefaultDataSourcePersistence;
	@BeanReference(type = CounterLocalService.class)
	protected CounterLocalService counterLocalService;
	@BeanReference(type = ResourceLocalService.class)
	protected ResourceLocalService resourceLocalService;
	@BeanReference(type = ResourceService.class)
	protected ResourceService resourceService;
	@BeanReference(type = ResourcePersistence.class)
	protected ResourcePersistence resourcePersistence;
	@BeanReference(type = UserLocalService.class)
	protected UserLocalService userLocalService;
	@BeanReference(type = UserService.class)
	protected UserService userService;
	@BeanReference(type = UserPersistence.class)
	protected UserPersistence userPersistence;
	private String _beanIdentifier;
	private TableFromDefaultDataSourceServiceClpInvoker _clpInvoker = new TableFromDefaultDataSourceServiceClpInvoker();
}