/**
 * Copyright (c) 2000-2012 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.meera.multidatasource.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import com.meera.multidatasource.model.TableFromAnotherDataSource;
import com.meera.multidatasource.model.TableFromAnotherDataSourceModel;
import com.meera.multidatasource.model.TableFromAnotherDataSourceSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the TableFromAnotherDataSource service. Represents a row in the &quot;TableFromAnotherDataSource&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.meera.multidatasource.model.TableFromAnotherDataSourceModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link TableFromAnotherDataSourceImpl}.
 * </p>
 *
 * @author E5410
 * @see TableFromAnotherDataSourceImpl
 * @see com.meera.multidatasource.model.TableFromAnotherDataSource
 * @see com.meera.multidatasource.model.TableFromAnotherDataSourceModel
 * @generated
 */
@JSON(strict = true)
public class TableFromAnotherDataSourceModelImpl extends BaseModelImpl<TableFromAnotherDataSource>
	implements TableFromAnotherDataSourceModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a table from another data source model instance should use the {@link com.meera.multidatasource.model.TableFromAnotherDataSource} interface instead.
	 */
	public static final String TABLE_NAME = "TableFromAnotherDataSource";
	public static final Object[][] TABLE_COLUMNS = {
			{ "IFADSId", Types.BIGINT },
			{ "Description", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table TableFromAnotherDataSource (IFADSId LONG not null primary key,Description VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table TableFromAnotherDataSource";
	public static final String DATA_SOURCE = "anotherDataSource";
	public static final String SESSION_FACTORY = "anotherSessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.meera.multidatasource.model.TableFromAnotherDataSource"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.meera.multidatasource.model.TableFromAnotherDataSource"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static TableFromAnotherDataSource toModel(
		TableFromAnotherDataSourceSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		TableFromAnotherDataSource model = new TableFromAnotherDataSourceImpl();

		model.setIFADSId(soapModel.getIFADSId());
		model.setDescription(soapModel.getDescription());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<TableFromAnotherDataSource> toModels(
		TableFromAnotherDataSourceSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<TableFromAnotherDataSource> models = new ArrayList<TableFromAnotherDataSource>(soapModels.length);

		for (TableFromAnotherDataSourceSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.meera.multidatasource.model.TableFromAnotherDataSource"));

	public TableFromAnotherDataSourceModelImpl() {
	}

	public long getPrimaryKey() {
		return _IFADSId;
	}

	public void setPrimaryKey(long primaryKey) {
		setIFADSId(primaryKey);
	}

	public Serializable getPrimaryKeyObj() {
		return new Long(_IFADSId);
	}

	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	public Class<?> getModelClass() {
		return TableFromAnotherDataSource.class;
	}

	public String getModelClassName() {
		return TableFromAnotherDataSource.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("IFADSId", getIFADSId());
		attributes.put("Description", getDescription());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long IFADSId = (Long)attributes.get("IFADSId");

		if (IFADSId != null) {
			setIFADSId(IFADSId);
		}

		String Description = (String)attributes.get("Description");

		if (Description != null) {
			setDescription(Description);
		}
	}

	@JSON
	public long getIFADSId() {
		return _IFADSId;
	}

	public void setIFADSId(long IFADSId) {
		_IFADSId = IFADSId;
	}

	@JSON
	public String getDescription() {
		if (_Description == null) {
			return StringPool.BLANK;
		}
		else {
			return _Description;
		}
	}

	public void setDescription(String Description) {
		_Description = Description;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			TableFromAnotherDataSource.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public TableFromAnotherDataSource toEscapedModel() {
		if (_escapedModelProxy == null) {
			_escapedModelProxy = (TableFromAnotherDataSource)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelProxyInterfaces,
					new AutoEscapeBeanHandler(this));
		}

		return _escapedModelProxy;
	}

	@Override
	public Object clone() {
		TableFromAnotherDataSourceImpl tableFromAnotherDataSourceImpl = new TableFromAnotherDataSourceImpl();

		tableFromAnotherDataSourceImpl.setIFADSId(getIFADSId());
		tableFromAnotherDataSourceImpl.setDescription(getDescription());

		tableFromAnotherDataSourceImpl.resetOriginalValues();

		return tableFromAnotherDataSourceImpl;
	}

	public int compareTo(TableFromAnotherDataSource tableFromAnotherDataSource) {
		long primaryKey = tableFromAnotherDataSource.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (obj == null) {
			return false;
		}

		TableFromAnotherDataSource tableFromAnotherDataSource = null;

		try {
			tableFromAnotherDataSource = (TableFromAnotherDataSource)obj;
		}
		catch (ClassCastException cce) {
			return false;
		}

		long primaryKey = tableFromAnotherDataSource.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<TableFromAnotherDataSource> toCacheModel() {
		TableFromAnotherDataSourceCacheModel tableFromAnotherDataSourceCacheModel =
			new TableFromAnotherDataSourceCacheModel();

		tableFromAnotherDataSourceCacheModel.IFADSId = getIFADSId();

		tableFromAnotherDataSourceCacheModel.Description = getDescription();

		String Description = tableFromAnotherDataSourceCacheModel.Description;

		if ((Description != null) && (Description.length() == 0)) {
			tableFromAnotherDataSourceCacheModel.Description = null;
		}

		return tableFromAnotherDataSourceCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(5);

		sb.append("{IFADSId=");
		sb.append(getIFADSId());
		sb.append(", Description=");
		sb.append(getDescription());
		sb.append("}");

		return sb.toString();
	}

	public String toXmlString() {
		StringBundler sb = new StringBundler(10);

		sb.append("<model><model-name>");
		sb.append("com.meera.multidatasource.model.TableFromAnotherDataSource");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>IFADSId</column-name><column-value><![CDATA[");
		sb.append(getIFADSId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>Description</column-name><column-value><![CDATA[");
		sb.append(getDescription());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = TableFromAnotherDataSource.class.getClassLoader();
	private static Class<?>[] _escapedModelProxyInterfaces = new Class[] {
			TableFromAnotherDataSource.class
		};
	private long _IFADSId;
	private String _Description;
	private TableFromAnotherDataSource _escapedModelProxy;
}